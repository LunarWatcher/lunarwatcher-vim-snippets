snippet is "Import system"
#include <$1>
endsnippet

snippet ih "Import header"
#include "$1"
endsnippet

# Namespaces {{{
snippet ns "Base namespace derived from first path component"
namespace ${1:`!v expand('%')->split("/")->get(1, "")`} {
${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet ns2 "Base namespace derived from second path component"
namespace ${1:`!v expand('%')->split("/")->get(2, "")`} {
${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nsf "Namespace with the filename"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nspf "Namespace with path and filename"
namespace ${1:`!v expand('%')->split("/")->get(1, "")`} {
namespace ${2/.+/ /m}${2:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}$0
}${2/.+/ \/* /m}$2${2/.+/ *\/ /m}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nspf2 "Namespace with the second path component, and the filename"
namespace ${1:`!v expand('%')->split("/")->get(2, "")`} {
namespace ${2/.+/ /m}${2:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}$0
}${2/.+/ \/* /m}$2${2/.+/ *\/ /m}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

# Compact C++17 declarations {{{
snippet nspfc "Same as nspf, but using C++17-compatible 'namespace a::b {}' declarations"
namespace ${1:`!v expand('%')->split("/")->get(1, "")`}::${2:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}$0
}${1/.+/ \/* /m}$1::$2${2/.+/ *\/ /m}
endsnippet

snippet nspf2c "Same as nspf2, but using C++17-compatible 'namespace a::b {}' declarations"
namespace ${1:`!v expand('%')->split("/")->get(2, "")`}::${2:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}$0
}${1/.+/ \/* /m}$1::$2${2/.+/ *\/ /m}
endsnippet
# }}}
# }}}

# OS selection macros {{{
# This form of detection is excessive in 99/100 cases, but it's a snippet, so no one has to
# type it, so it's irrelevant
#
# There's basically only three different scenarios:
# 1. Something is windows-only
# 2. Something is everything but windows (because Windows is a piece of shit)
# 3. Something is OS-specific, and varies across the three major OSes
snippet ifwin "If windows"
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
	$1
#endif
endsnippet

snippet ifnwin "If not windows"
#if !defined(WIN32) || !defined(_WIN32) || !defined(__WIN32__) || !defined(__NT__)
	$1
#endif
endsnippet

# There's better ways to deal with this, but in the _vast_ majority of my projects, I exclusively do checks for
# whether _WIN32 is defined or undefined. Higher resolution checks, for me, don't go deeper than checking windows,
# apple, and everything else (which is usually guarantees linux for my applications). Could probably add variants of
# these later.
# But I don't work with super low level stuff most of the time. If the UNIX API doesn't support it, that's when I use
# this one, but that's exceedingly rare. Haven't used it once in stc (AFAIK), and that's a compat layer.
# It has an if windows and else for all other OSes that run basically the same standard. Apple has some weird shit
# for some things though (and I guess from the perspective of a general UNIX user, so does Linux, but we'll cross
# that bridge when I get a non-linux UNIX user on a repo)
snippet ossel "OS selector (desktop only); pragmas for Windows, Linux, and MacOS"
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
	$1
#elif defined(__APPLE__)
	$2
#elif defined(__linux__)
	$3
#endif
endsnippet
# }}}

snippet la "Zero-arg standard lambda" w
[$1]($2) {
	$3
}
endsnippet
